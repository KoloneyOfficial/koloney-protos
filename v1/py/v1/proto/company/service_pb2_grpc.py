# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from v1.proto.company import entities_pb2 as v1_dot_proto_dot_company_dot_entities__pb2
from v1.proto.company import service_pb2 as v1_dot_proto_dot_company_dot_service__pb2


class CompanyServiceStub(object):
    """CompanyService provides company management functionality
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCompany = channel.unary_unary(
                '/company.CompanyService/CreateCompany',
                request_serializer=v1_dot_proto_dot_company_dot_service__pb2.CreateCompanyRequest.SerializeToString,
                response_deserializer=v1_dot_proto_dot_company_dot_entities__pb2.Company.FromString,
                _registered_method=True)
        self.GetCompany = channel.unary_unary(
                '/company.CompanyService/GetCompany',
                request_serializer=v1_dot_proto_dot_company_dot_service__pb2.GetCompanyRequest.SerializeToString,
                response_deserializer=v1_dot_proto_dot_company_dot_entities__pb2.Company.FromString,
                _registered_method=True)
        self.UpdateCompany = channel.unary_unary(
                '/company.CompanyService/UpdateCompany',
                request_serializer=v1_dot_proto_dot_company_dot_service__pb2.UpdateCompanyRequest.SerializeToString,
                response_deserializer=v1_dot_proto_dot_company_dot_entities__pb2.Company.FromString,
                _registered_method=True)
        self.DeleteCompany = channel.unary_unary(
                '/company.CompanyService/DeleteCompany',
                request_serializer=v1_dot_proto_dot_company_dot_service__pb2.DeleteCompanyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.ListCompanies = channel.unary_unary(
                '/company.CompanyService/ListCompanies',
                request_serializer=v1_dot_proto_dot_company_dot_service__pb2.ListCompaniesRequest.SerializeToString,
                response_deserializer=v1_dot_proto_dot_company_dot_service__pb2.ListCompaniesResponse.FromString,
                _registered_method=True)
        self.SearchCompanies = channel.unary_unary(
                '/company.CompanyService/SearchCompanies',
                request_serializer=v1_dot_proto_dot_company_dot_service__pb2.SearchCompaniesRequest.SerializeToString,
                response_deserializer=v1_dot_proto_dot_company_dot_service__pb2.SearchCompaniesResponse.FromString,
                _registered_method=True)
        self.UpdateCompanyStatus = channel.unary_unary(
                '/company.CompanyService/UpdateCompanyStatus',
                request_serializer=v1_dot_proto_dot_company_dot_service__pb2.UpdateCompanyStatusRequest.SerializeToString,
                response_deserializer=v1_dot_proto_dot_company_dot_entities__pb2.Company.FromString,
                _registered_method=True)
        self.VerifyCompany = channel.unary_unary(
                '/company.CompanyService/VerifyCompany',
                request_serializer=v1_dot_proto_dot_company_dot_service__pb2.VerifyCompanyRequest.SerializeToString,
                response_deserializer=v1_dot_proto_dot_company_dot_entities__pb2.Company.FromString,
                _registered_method=True)


class CompanyServiceServicer(object):
    """CompanyService provides company management functionality
    """

    def CreateCompany(self, request, context):
        """CreateCompany creates a new company profile
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompany(self, request, context):
        """GetCompany retrieves a company by ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCompany(self, request, context):
        """UpdateCompany updates an existing company profile
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCompany(self, request, context):
        """DeleteCompany removes a company profile
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCompanies(self, request, context):
        """ListCompanies retrieves a paginated list of companies
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchCompanies(self, request, context):
        """SearchCompanies searches for companies based on criteria
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCompanyStatus(self, request, context):
        """UpdateCompanyStatus changes the status of a company
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyCompany(self, request, context):
        """VerifyCompany marks a company as verified
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CompanyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCompany,
                    request_deserializer=v1_dot_proto_dot_company_dot_service__pb2.CreateCompanyRequest.FromString,
                    response_serializer=v1_dot_proto_dot_company_dot_entities__pb2.Company.SerializeToString,
            ),
            'GetCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompany,
                    request_deserializer=v1_dot_proto_dot_company_dot_service__pb2.GetCompanyRequest.FromString,
                    response_serializer=v1_dot_proto_dot_company_dot_entities__pb2.Company.SerializeToString,
            ),
            'UpdateCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCompany,
                    request_deserializer=v1_dot_proto_dot_company_dot_service__pb2.UpdateCompanyRequest.FromString,
                    response_serializer=v1_dot_proto_dot_company_dot_entities__pb2.Company.SerializeToString,
            ),
            'DeleteCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCompany,
                    request_deserializer=v1_dot_proto_dot_company_dot_service__pb2.DeleteCompanyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListCompanies': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCompanies,
                    request_deserializer=v1_dot_proto_dot_company_dot_service__pb2.ListCompaniesRequest.FromString,
                    response_serializer=v1_dot_proto_dot_company_dot_service__pb2.ListCompaniesResponse.SerializeToString,
            ),
            'SearchCompanies': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchCompanies,
                    request_deserializer=v1_dot_proto_dot_company_dot_service__pb2.SearchCompaniesRequest.FromString,
                    response_serializer=v1_dot_proto_dot_company_dot_service__pb2.SearchCompaniesResponse.SerializeToString,
            ),
            'UpdateCompanyStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCompanyStatus,
                    request_deserializer=v1_dot_proto_dot_company_dot_service__pb2.UpdateCompanyStatusRequest.FromString,
                    response_serializer=v1_dot_proto_dot_company_dot_entities__pb2.Company.SerializeToString,
            ),
            'VerifyCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyCompany,
                    request_deserializer=v1_dot_proto_dot_company_dot_service__pb2.VerifyCompanyRequest.FromString,
                    response_serializer=v1_dot_proto_dot_company_dot_entities__pb2.Company.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'company.CompanyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('company.CompanyService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CompanyService(object):
    """CompanyService provides company management functionality
    """

    @staticmethod
    def CreateCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/company.CompanyService/CreateCompany',
            v1_dot_proto_dot_company_dot_service__pb2.CreateCompanyRequest.SerializeToString,
            v1_dot_proto_dot_company_dot_entities__pb2.Company.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/company.CompanyService/GetCompany',
            v1_dot_proto_dot_company_dot_service__pb2.GetCompanyRequest.SerializeToString,
            v1_dot_proto_dot_company_dot_entities__pb2.Company.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/company.CompanyService/UpdateCompany',
            v1_dot_proto_dot_company_dot_service__pb2.UpdateCompanyRequest.SerializeToString,
            v1_dot_proto_dot_company_dot_entities__pb2.Company.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/company.CompanyService/DeleteCompany',
            v1_dot_proto_dot_company_dot_service__pb2.DeleteCompanyRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCompanies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/company.CompanyService/ListCompanies',
            v1_dot_proto_dot_company_dot_service__pb2.ListCompaniesRequest.SerializeToString,
            v1_dot_proto_dot_company_dot_service__pb2.ListCompaniesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchCompanies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/company.CompanyService/SearchCompanies',
            v1_dot_proto_dot_company_dot_service__pb2.SearchCompaniesRequest.SerializeToString,
            v1_dot_proto_dot_company_dot_service__pb2.SearchCompaniesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateCompanyStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/company.CompanyService/UpdateCompanyStatus',
            v1_dot_proto_dot_company_dot_service__pb2.UpdateCompanyStatusRequest.SerializeToString,
            v1_dot_proto_dot_company_dot_entities__pb2.Company.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/company.CompanyService/VerifyCompany',
            v1_dot_proto_dot_company_dot_service__pb2.VerifyCompanyRequest.SerializeToString,
            v1_dot_proto_dot_company_dot_entities__pb2.Company.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
