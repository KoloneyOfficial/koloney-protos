// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/proto/job/job.proto

package jobv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	job "koloney-protos/v1/go/v1/proto/job"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// JobServiceName is the fully-qualified name of the JobService service.
	JobServiceName = "koloney.job.v1.JobService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// JobServiceCreateJobProcedure is the fully-qualified name of the JobService's CreateJob RPC.
	JobServiceCreateJobProcedure = "/koloney.job.v1.JobService/CreateJob"
	// JobServiceGetJobProcedure is the fully-qualified name of the JobService's GetJob RPC.
	JobServiceGetJobProcedure = "/koloney.job.v1.JobService/GetJob"
	// JobServiceUpdateJobProcedure is the fully-qualified name of the JobService's UpdateJob RPC.
	JobServiceUpdateJobProcedure = "/koloney.job.v1.JobService/UpdateJob"
	// JobServiceDeleteJobProcedure is the fully-qualified name of the JobService's DeleteJob RPC.
	JobServiceDeleteJobProcedure = "/koloney.job.v1.JobService/DeleteJob"
	// JobServiceListJobsProcedure is the fully-qualified name of the JobService's ListJobs RPC.
	JobServiceListJobsProcedure = "/koloney.job.v1.JobService/ListJobs"
	// JobServiceSearchJobsProcedure is the fully-qualified name of the JobService's SearchJobs RPC.
	JobServiceSearchJobsProcedure = "/koloney.job.v1.JobService/SearchJobs"
	// JobServiceUpdateJobStatusProcedure is the fully-qualified name of the JobService's
	// UpdateJobStatus RPC.
	JobServiceUpdateJobStatusProcedure = "/koloney.job.v1.JobService/UpdateJobStatus"
)

// JobServiceClient is a client for the koloney.job.v1.JobService service.
type JobServiceClient interface {
	// CreateJob creates a new job posting.
	CreateJob(context.Context, *connect_go.Request[job.CreateJobRequest]) (*connect_go.Response[job.Job], error)
	// GetJob retrieves a job by name.
	GetJob(context.Context, *connect_go.Request[job.GetJobRequest]) (*connect_go.Response[job.Job], error)
	// UpdateJob updates an existing job posting.
	UpdateJob(context.Context, *connect_go.Request[job.UpdateJobRequest]) (*connect_go.Response[job.Job], error)
	// DeleteJob removes a job posting.
	DeleteJob(context.Context, *connect_go.Request[job.DeleteJobRequest]) (*connect_go.Response[emptypb.Empty], error)
	// ListJobs retrieves a paginated list of jobs.
	ListJobs(context.Context, *connect_go.Request[job.ListJobsRequest]) (*connect_go.Response[job.ListJobsResponse], error)
	// SearchJobs searches for jobs based on criteria.
	SearchJobs(context.Context, *connect_go.Request[job.SearchJobsRequest]) (*connect_go.Response[job.SearchJobsResponse], error)
	// UpdateJobStatus changes the status of a job.
	UpdateJobStatus(context.Context, *connect_go.Request[job.UpdateJobStatusRequest]) (*connect_go.Response[job.Job], error)
}

// NewJobServiceClient constructs a client for the koloney.job.v1.JobService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJobServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) JobServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &jobServiceClient{
		createJob: connect_go.NewClient[job.CreateJobRequest, job.Job](
			httpClient,
			baseURL+JobServiceCreateJobProcedure,
			opts...,
		),
		getJob: connect_go.NewClient[job.GetJobRequest, job.Job](
			httpClient,
			baseURL+JobServiceGetJobProcedure,
			opts...,
		),
		updateJob: connect_go.NewClient[job.UpdateJobRequest, job.Job](
			httpClient,
			baseURL+JobServiceUpdateJobProcedure,
			opts...,
		),
		deleteJob: connect_go.NewClient[job.DeleteJobRequest, emptypb.Empty](
			httpClient,
			baseURL+JobServiceDeleteJobProcedure,
			opts...,
		),
		listJobs: connect_go.NewClient[job.ListJobsRequest, job.ListJobsResponse](
			httpClient,
			baseURL+JobServiceListJobsProcedure,
			opts...,
		),
		searchJobs: connect_go.NewClient[job.SearchJobsRequest, job.SearchJobsResponse](
			httpClient,
			baseURL+JobServiceSearchJobsProcedure,
			opts...,
		),
		updateJobStatus: connect_go.NewClient[job.UpdateJobStatusRequest, job.Job](
			httpClient,
			baseURL+JobServiceUpdateJobStatusProcedure,
			opts...,
		),
	}
}

// jobServiceClient implements JobServiceClient.
type jobServiceClient struct {
	createJob       *connect_go.Client[job.CreateJobRequest, job.Job]
	getJob          *connect_go.Client[job.GetJobRequest, job.Job]
	updateJob       *connect_go.Client[job.UpdateJobRequest, job.Job]
	deleteJob       *connect_go.Client[job.DeleteJobRequest, emptypb.Empty]
	listJobs        *connect_go.Client[job.ListJobsRequest, job.ListJobsResponse]
	searchJobs      *connect_go.Client[job.SearchJobsRequest, job.SearchJobsResponse]
	updateJobStatus *connect_go.Client[job.UpdateJobStatusRequest, job.Job]
}

// CreateJob calls koloney.job.v1.JobService.CreateJob.
func (c *jobServiceClient) CreateJob(ctx context.Context, req *connect_go.Request[job.CreateJobRequest]) (*connect_go.Response[job.Job], error) {
	return c.createJob.CallUnary(ctx, req)
}

// GetJob calls koloney.job.v1.JobService.GetJob.
func (c *jobServiceClient) GetJob(ctx context.Context, req *connect_go.Request[job.GetJobRequest]) (*connect_go.Response[job.Job], error) {
	return c.getJob.CallUnary(ctx, req)
}

// UpdateJob calls koloney.job.v1.JobService.UpdateJob.
func (c *jobServiceClient) UpdateJob(ctx context.Context, req *connect_go.Request[job.UpdateJobRequest]) (*connect_go.Response[job.Job], error) {
	return c.updateJob.CallUnary(ctx, req)
}

// DeleteJob calls koloney.job.v1.JobService.DeleteJob.
func (c *jobServiceClient) DeleteJob(ctx context.Context, req *connect_go.Request[job.DeleteJobRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteJob.CallUnary(ctx, req)
}

// ListJobs calls koloney.job.v1.JobService.ListJobs.
func (c *jobServiceClient) ListJobs(ctx context.Context, req *connect_go.Request[job.ListJobsRequest]) (*connect_go.Response[job.ListJobsResponse], error) {
	return c.listJobs.CallUnary(ctx, req)
}

// SearchJobs calls koloney.job.v1.JobService.SearchJobs.
func (c *jobServiceClient) SearchJobs(ctx context.Context, req *connect_go.Request[job.SearchJobsRequest]) (*connect_go.Response[job.SearchJobsResponse], error) {
	return c.searchJobs.CallUnary(ctx, req)
}

// UpdateJobStatus calls koloney.job.v1.JobService.UpdateJobStatus.
func (c *jobServiceClient) UpdateJobStatus(ctx context.Context, req *connect_go.Request[job.UpdateJobStatusRequest]) (*connect_go.Response[job.Job], error) {
	return c.updateJobStatus.CallUnary(ctx, req)
}

// JobServiceHandler is an implementation of the koloney.job.v1.JobService service.
type JobServiceHandler interface {
	// CreateJob creates a new job posting.
	CreateJob(context.Context, *connect_go.Request[job.CreateJobRequest]) (*connect_go.Response[job.Job], error)
	// GetJob retrieves a job by name.
	GetJob(context.Context, *connect_go.Request[job.GetJobRequest]) (*connect_go.Response[job.Job], error)
	// UpdateJob updates an existing job posting.
	UpdateJob(context.Context, *connect_go.Request[job.UpdateJobRequest]) (*connect_go.Response[job.Job], error)
	// DeleteJob removes a job posting.
	DeleteJob(context.Context, *connect_go.Request[job.DeleteJobRequest]) (*connect_go.Response[emptypb.Empty], error)
	// ListJobs retrieves a paginated list of jobs.
	ListJobs(context.Context, *connect_go.Request[job.ListJobsRequest]) (*connect_go.Response[job.ListJobsResponse], error)
	// SearchJobs searches for jobs based on criteria.
	SearchJobs(context.Context, *connect_go.Request[job.SearchJobsRequest]) (*connect_go.Response[job.SearchJobsResponse], error)
	// UpdateJobStatus changes the status of a job.
	UpdateJobStatus(context.Context, *connect_go.Request[job.UpdateJobStatusRequest]) (*connect_go.Response[job.Job], error)
}

// NewJobServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJobServiceHandler(svc JobServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	jobServiceCreateJobHandler := connect_go.NewUnaryHandler(
		JobServiceCreateJobProcedure,
		svc.CreateJob,
		opts...,
	)
	jobServiceGetJobHandler := connect_go.NewUnaryHandler(
		JobServiceGetJobProcedure,
		svc.GetJob,
		opts...,
	)
	jobServiceUpdateJobHandler := connect_go.NewUnaryHandler(
		JobServiceUpdateJobProcedure,
		svc.UpdateJob,
		opts...,
	)
	jobServiceDeleteJobHandler := connect_go.NewUnaryHandler(
		JobServiceDeleteJobProcedure,
		svc.DeleteJob,
		opts...,
	)
	jobServiceListJobsHandler := connect_go.NewUnaryHandler(
		JobServiceListJobsProcedure,
		svc.ListJobs,
		opts...,
	)
	jobServiceSearchJobsHandler := connect_go.NewUnaryHandler(
		JobServiceSearchJobsProcedure,
		svc.SearchJobs,
		opts...,
	)
	jobServiceUpdateJobStatusHandler := connect_go.NewUnaryHandler(
		JobServiceUpdateJobStatusProcedure,
		svc.UpdateJobStatus,
		opts...,
	)
	return "/koloney.job.v1.JobService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JobServiceCreateJobProcedure:
			jobServiceCreateJobHandler.ServeHTTP(w, r)
		case JobServiceGetJobProcedure:
			jobServiceGetJobHandler.ServeHTTP(w, r)
		case JobServiceUpdateJobProcedure:
			jobServiceUpdateJobHandler.ServeHTTP(w, r)
		case JobServiceDeleteJobProcedure:
			jobServiceDeleteJobHandler.ServeHTTP(w, r)
		case JobServiceListJobsProcedure:
			jobServiceListJobsHandler.ServeHTTP(w, r)
		case JobServiceSearchJobsProcedure:
			jobServiceSearchJobsHandler.ServeHTTP(w, r)
		case JobServiceUpdateJobStatusProcedure:
			jobServiceUpdateJobStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJobServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedJobServiceHandler struct{}

func (UnimplementedJobServiceHandler) CreateJob(context.Context, *connect_go.Request[job.CreateJobRequest]) (*connect_go.Response[job.Job], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.job.v1.JobService.CreateJob is not implemented"))
}

func (UnimplementedJobServiceHandler) GetJob(context.Context, *connect_go.Request[job.GetJobRequest]) (*connect_go.Response[job.Job], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.job.v1.JobService.GetJob is not implemented"))
}

func (UnimplementedJobServiceHandler) UpdateJob(context.Context, *connect_go.Request[job.UpdateJobRequest]) (*connect_go.Response[job.Job], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.job.v1.JobService.UpdateJob is not implemented"))
}

func (UnimplementedJobServiceHandler) DeleteJob(context.Context, *connect_go.Request[job.DeleteJobRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.job.v1.JobService.DeleteJob is not implemented"))
}

func (UnimplementedJobServiceHandler) ListJobs(context.Context, *connect_go.Request[job.ListJobsRequest]) (*connect_go.Response[job.ListJobsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.job.v1.JobService.ListJobs is not implemented"))
}

func (UnimplementedJobServiceHandler) SearchJobs(context.Context, *connect_go.Request[job.SearchJobsRequest]) (*connect_go.Response[job.SearchJobsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.job.v1.JobService.SearchJobs is not implemented"))
}

func (UnimplementedJobServiceHandler) UpdateJobStatus(context.Context, *connect_go.Request[job.UpdateJobStatusRequest]) (*connect_go.Response[job.Job], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.job.v1.JobService.UpdateJobStatus is not implemented"))
}
