// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/proto/koloney/koloney.proto

package koloneyconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	koloney "koloney-protos/v1/go/v1/proto/koloney"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// KoloneyServiceName is the fully-qualified name of the KoloneyService service.
	KoloneyServiceName = "koloney.KoloneyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KoloneyServiceGetBalanceProcedure is the fully-qualified name of the KoloneyService's GetBalance
	// RPC.
	KoloneyServiceGetBalanceProcedure = "/koloney.KoloneyService/GetBalance"
)

// KoloneyServiceClient is a client for the koloney.KoloneyService service.
type KoloneyServiceClient interface {
	// GetBalance retrieves the current balance
	GetBalance(context.Context, *connect_go.Request[koloney.GetBalanceRequest]) (*connect_go.Response[koloney.GetBalanceResponse], error)
}

// NewKoloneyServiceClient constructs a client for the koloney.KoloneyService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKoloneyServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) KoloneyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &koloneyServiceClient{
		getBalance: connect_go.NewClient[koloney.GetBalanceRequest, koloney.GetBalanceResponse](
			httpClient,
			baseURL+KoloneyServiceGetBalanceProcedure,
			opts...,
		),
	}
}

// koloneyServiceClient implements KoloneyServiceClient.
type koloneyServiceClient struct {
	getBalance *connect_go.Client[koloney.GetBalanceRequest, koloney.GetBalanceResponse]
}

// GetBalance calls koloney.KoloneyService.GetBalance.
func (c *koloneyServiceClient) GetBalance(ctx context.Context, req *connect_go.Request[koloney.GetBalanceRequest]) (*connect_go.Response[koloney.GetBalanceResponse], error) {
	return c.getBalance.CallUnary(ctx, req)
}

// KoloneyServiceHandler is an implementation of the koloney.KoloneyService service.
type KoloneyServiceHandler interface {
	// GetBalance retrieves the current balance
	GetBalance(context.Context, *connect_go.Request[koloney.GetBalanceRequest]) (*connect_go.Response[koloney.GetBalanceResponse], error)
}

// NewKoloneyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKoloneyServiceHandler(svc KoloneyServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	koloneyServiceGetBalanceHandler := connect_go.NewUnaryHandler(
		KoloneyServiceGetBalanceProcedure,
		svc.GetBalance,
		opts...,
	)
	return "/koloney.KoloneyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KoloneyServiceGetBalanceProcedure:
			koloneyServiceGetBalanceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKoloneyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKoloneyServiceHandler struct{}

func (UnimplementedKoloneyServiceHandler) GetBalance(context.Context, *connect_go.Request[koloney.GetBalanceRequest]) (*connect_go.Response[koloney.GetBalanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.KoloneyService.GetBalance is not implemented"))
}
