// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/proto/company/company.proto

package companyv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	company "koloney-protos/v1/go/v1/proto/company"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CompanyServiceName is the fully-qualified name of the CompanyService service.
	CompanyServiceName = "koloney.company.v1.CompanyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CompanyServiceCreateCompanyProcedure is the fully-qualified name of the CompanyService's
	// CreateCompany RPC.
	CompanyServiceCreateCompanyProcedure = "/koloney.company.v1.CompanyService/CreateCompany"
	// CompanyServiceGetCompanyProcedure is the fully-qualified name of the CompanyService's GetCompany
	// RPC.
	CompanyServiceGetCompanyProcedure = "/koloney.company.v1.CompanyService/GetCompany"
	// CompanyServiceUpdateCompanyProcedure is the fully-qualified name of the CompanyService's
	// UpdateCompany RPC.
	CompanyServiceUpdateCompanyProcedure = "/koloney.company.v1.CompanyService/UpdateCompany"
	// CompanyServiceDeleteCompanyProcedure is the fully-qualified name of the CompanyService's
	// DeleteCompany RPC.
	CompanyServiceDeleteCompanyProcedure = "/koloney.company.v1.CompanyService/DeleteCompany"
	// CompanyServiceListCompaniesProcedure is the fully-qualified name of the CompanyService's
	// ListCompanies RPC.
	CompanyServiceListCompaniesProcedure = "/koloney.company.v1.CompanyService/ListCompanies"
	// CompanyServiceSearchCompaniesProcedure is the fully-qualified name of the CompanyService's
	// SearchCompanies RPC.
	CompanyServiceSearchCompaniesProcedure = "/koloney.company.v1.CompanyService/SearchCompanies"
	// CompanyServiceUpdateCompanyStatusProcedure is the fully-qualified name of the CompanyService's
	// UpdateCompanyStatus RPC.
	CompanyServiceUpdateCompanyStatusProcedure = "/koloney.company.v1.CompanyService/UpdateCompanyStatus"
	// CompanyServiceVerifyCompanyProcedure is the fully-qualified name of the CompanyService's
	// VerifyCompany RPC.
	CompanyServiceVerifyCompanyProcedure = "/koloney.company.v1.CompanyService/VerifyCompany"
)

// CompanyServiceClient is a client for the koloney.company.v1.CompanyService service.
type CompanyServiceClient interface {
	// CreateCompany creates a new company profile.
	CreateCompany(context.Context, *connect_go.Request[company.CreateCompanyRequest]) (*connect_go.Response[company.Company], error)
	// GetCompany retrieves a company by name.
	GetCompany(context.Context, *connect_go.Request[company.GetCompanyRequest]) (*connect_go.Response[company.Company], error)
	// UpdateCompany updates an existing company profile.
	UpdateCompany(context.Context, *connect_go.Request[company.UpdateCompanyRequest]) (*connect_go.Response[company.Company], error)
	// DeleteCompany removes a company profile.
	DeleteCompany(context.Context, *connect_go.Request[company.DeleteCompanyRequest]) (*connect_go.Response[emptypb.Empty], error)
	// ListCompanies retrieves a paginated list of companies.
	ListCompanies(context.Context, *connect_go.Request[company.ListCompaniesRequest]) (*connect_go.Response[company.ListCompaniesResponse], error)
	// SearchCompanies searches for companies based on criteria.
	SearchCompanies(context.Context, *connect_go.Request[company.SearchCompaniesRequest]) (*connect_go.Response[company.SearchCompaniesResponse], error)
	// UpdateCompanyStatus changes the status of a company.
	UpdateCompanyStatus(context.Context, *connect_go.Request[company.UpdateCompanyStatusRequest]) (*connect_go.Response[company.Company], error)
	// VerifyCompany marks a company as verified.
	VerifyCompany(context.Context, *connect_go.Request[company.VerifyCompanyRequest]) (*connect_go.Response[company.Company], error)
}

// NewCompanyServiceClient constructs a client for the koloney.company.v1.CompanyService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCompanyServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CompanyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &companyServiceClient{
		createCompany: connect_go.NewClient[company.CreateCompanyRequest, company.Company](
			httpClient,
			baseURL+CompanyServiceCreateCompanyProcedure,
			opts...,
		),
		getCompany: connect_go.NewClient[company.GetCompanyRequest, company.Company](
			httpClient,
			baseURL+CompanyServiceGetCompanyProcedure,
			opts...,
		),
		updateCompany: connect_go.NewClient[company.UpdateCompanyRequest, company.Company](
			httpClient,
			baseURL+CompanyServiceUpdateCompanyProcedure,
			opts...,
		),
		deleteCompany: connect_go.NewClient[company.DeleteCompanyRequest, emptypb.Empty](
			httpClient,
			baseURL+CompanyServiceDeleteCompanyProcedure,
			opts...,
		),
		listCompanies: connect_go.NewClient[company.ListCompaniesRequest, company.ListCompaniesResponse](
			httpClient,
			baseURL+CompanyServiceListCompaniesProcedure,
			opts...,
		),
		searchCompanies: connect_go.NewClient[company.SearchCompaniesRequest, company.SearchCompaniesResponse](
			httpClient,
			baseURL+CompanyServiceSearchCompaniesProcedure,
			opts...,
		),
		updateCompanyStatus: connect_go.NewClient[company.UpdateCompanyStatusRequest, company.Company](
			httpClient,
			baseURL+CompanyServiceUpdateCompanyStatusProcedure,
			opts...,
		),
		verifyCompany: connect_go.NewClient[company.VerifyCompanyRequest, company.Company](
			httpClient,
			baseURL+CompanyServiceVerifyCompanyProcedure,
			opts...,
		),
	}
}

// companyServiceClient implements CompanyServiceClient.
type companyServiceClient struct {
	createCompany       *connect_go.Client[company.CreateCompanyRequest, company.Company]
	getCompany          *connect_go.Client[company.GetCompanyRequest, company.Company]
	updateCompany       *connect_go.Client[company.UpdateCompanyRequest, company.Company]
	deleteCompany       *connect_go.Client[company.DeleteCompanyRequest, emptypb.Empty]
	listCompanies       *connect_go.Client[company.ListCompaniesRequest, company.ListCompaniesResponse]
	searchCompanies     *connect_go.Client[company.SearchCompaniesRequest, company.SearchCompaniesResponse]
	updateCompanyStatus *connect_go.Client[company.UpdateCompanyStatusRequest, company.Company]
	verifyCompany       *connect_go.Client[company.VerifyCompanyRequest, company.Company]
}

// CreateCompany calls koloney.company.v1.CompanyService.CreateCompany.
func (c *companyServiceClient) CreateCompany(ctx context.Context, req *connect_go.Request[company.CreateCompanyRequest]) (*connect_go.Response[company.Company], error) {
	return c.createCompany.CallUnary(ctx, req)
}

// GetCompany calls koloney.company.v1.CompanyService.GetCompany.
func (c *companyServiceClient) GetCompany(ctx context.Context, req *connect_go.Request[company.GetCompanyRequest]) (*connect_go.Response[company.Company], error) {
	return c.getCompany.CallUnary(ctx, req)
}

// UpdateCompany calls koloney.company.v1.CompanyService.UpdateCompany.
func (c *companyServiceClient) UpdateCompany(ctx context.Context, req *connect_go.Request[company.UpdateCompanyRequest]) (*connect_go.Response[company.Company], error) {
	return c.updateCompany.CallUnary(ctx, req)
}

// DeleteCompany calls koloney.company.v1.CompanyService.DeleteCompany.
func (c *companyServiceClient) DeleteCompany(ctx context.Context, req *connect_go.Request[company.DeleteCompanyRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteCompany.CallUnary(ctx, req)
}

// ListCompanies calls koloney.company.v1.CompanyService.ListCompanies.
func (c *companyServiceClient) ListCompanies(ctx context.Context, req *connect_go.Request[company.ListCompaniesRequest]) (*connect_go.Response[company.ListCompaniesResponse], error) {
	return c.listCompanies.CallUnary(ctx, req)
}

// SearchCompanies calls koloney.company.v1.CompanyService.SearchCompanies.
func (c *companyServiceClient) SearchCompanies(ctx context.Context, req *connect_go.Request[company.SearchCompaniesRequest]) (*connect_go.Response[company.SearchCompaniesResponse], error) {
	return c.searchCompanies.CallUnary(ctx, req)
}

// UpdateCompanyStatus calls koloney.company.v1.CompanyService.UpdateCompanyStatus.
func (c *companyServiceClient) UpdateCompanyStatus(ctx context.Context, req *connect_go.Request[company.UpdateCompanyStatusRequest]) (*connect_go.Response[company.Company], error) {
	return c.updateCompanyStatus.CallUnary(ctx, req)
}

// VerifyCompany calls koloney.company.v1.CompanyService.VerifyCompany.
func (c *companyServiceClient) VerifyCompany(ctx context.Context, req *connect_go.Request[company.VerifyCompanyRequest]) (*connect_go.Response[company.Company], error) {
	return c.verifyCompany.CallUnary(ctx, req)
}

// CompanyServiceHandler is an implementation of the koloney.company.v1.CompanyService service.
type CompanyServiceHandler interface {
	// CreateCompany creates a new company profile.
	CreateCompany(context.Context, *connect_go.Request[company.CreateCompanyRequest]) (*connect_go.Response[company.Company], error)
	// GetCompany retrieves a company by name.
	GetCompany(context.Context, *connect_go.Request[company.GetCompanyRequest]) (*connect_go.Response[company.Company], error)
	// UpdateCompany updates an existing company profile.
	UpdateCompany(context.Context, *connect_go.Request[company.UpdateCompanyRequest]) (*connect_go.Response[company.Company], error)
	// DeleteCompany removes a company profile.
	DeleteCompany(context.Context, *connect_go.Request[company.DeleteCompanyRequest]) (*connect_go.Response[emptypb.Empty], error)
	// ListCompanies retrieves a paginated list of companies.
	ListCompanies(context.Context, *connect_go.Request[company.ListCompaniesRequest]) (*connect_go.Response[company.ListCompaniesResponse], error)
	// SearchCompanies searches for companies based on criteria.
	SearchCompanies(context.Context, *connect_go.Request[company.SearchCompaniesRequest]) (*connect_go.Response[company.SearchCompaniesResponse], error)
	// UpdateCompanyStatus changes the status of a company.
	UpdateCompanyStatus(context.Context, *connect_go.Request[company.UpdateCompanyStatusRequest]) (*connect_go.Response[company.Company], error)
	// VerifyCompany marks a company as verified.
	VerifyCompany(context.Context, *connect_go.Request[company.VerifyCompanyRequest]) (*connect_go.Response[company.Company], error)
}

// NewCompanyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCompanyServiceHandler(svc CompanyServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	companyServiceCreateCompanyHandler := connect_go.NewUnaryHandler(
		CompanyServiceCreateCompanyProcedure,
		svc.CreateCompany,
		opts...,
	)
	companyServiceGetCompanyHandler := connect_go.NewUnaryHandler(
		CompanyServiceGetCompanyProcedure,
		svc.GetCompany,
		opts...,
	)
	companyServiceUpdateCompanyHandler := connect_go.NewUnaryHandler(
		CompanyServiceUpdateCompanyProcedure,
		svc.UpdateCompany,
		opts...,
	)
	companyServiceDeleteCompanyHandler := connect_go.NewUnaryHandler(
		CompanyServiceDeleteCompanyProcedure,
		svc.DeleteCompany,
		opts...,
	)
	companyServiceListCompaniesHandler := connect_go.NewUnaryHandler(
		CompanyServiceListCompaniesProcedure,
		svc.ListCompanies,
		opts...,
	)
	companyServiceSearchCompaniesHandler := connect_go.NewUnaryHandler(
		CompanyServiceSearchCompaniesProcedure,
		svc.SearchCompanies,
		opts...,
	)
	companyServiceUpdateCompanyStatusHandler := connect_go.NewUnaryHandler(
		CompanyServiceUpdateCompanyStatusProcedure,
		svc.UpdateCompanyStatus,
		opts...,
	)
	companyServiceVerifyCompanyHandler := connect_go.NewUnaryHandler(
		CompanyServiceVerifyCompanyProcedure,
		svc.VerifyCompany,
		opts...,
	)
	return "/koloney.company.v1.CompanyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CompanyServiceCreateCompanyProcedure:
			companyServiceCreateCompanyHandler.ServeHTTP(w, r)
		case CompanyServiceGetCompanyProcedure:
			companyServiceGetCompanyHandler.ServeHTTP(w, r)
		case CompanyServiceUpdateCompanyProcedure:
			companyServiceUpdateCompanyHandler.ServeHTTP(w, r)
		case CompanyServiceDeleteCompanyProcedure:
			companyServiceDeleteCompanyHandler.ServeHTTP(w, r)
		case CompanyServiceListCompaniesProcedure:
			companyServiceListCompaniesHandler.ServeHTTP(w, r)
		case CompanyServiceSearchCompaniesProcedure:
			companyServiceSearchCompaniesHandler.ServeHTTP(w, r)
		case CompanyServiceUpdateCompanyStatusProcedure:
			companyServiceUpdateCompanyStatusHandler.ServeHTTP(w, r)
		case CompanyServiceVerifyCompanyProcedure:
			companyServiceVerifyCompanyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCompanyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCompanyServiceHandler struct{}

func (UnimplementedCompanyServiceHandler) CreateCompany(context.Context, *connect_go.Request[company.CreateCompanyRequest]) (*connect_go.Response[company.Company], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.company.v1.CompanyService.CreateCompany is not implemented"))
}

func (UnimplementedCompanyServiceHandler) GetCompany(context.Context, *connect_go.Request[company.GetCompanyRequest]) (*connect_go.Response[company.Company], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.company.v1.CompanyService.GetCompany is not implemented"))
}

func (UnimplementedCompanyServiceHandler) UpdateCompany(context.Context, *connect_go.Request[company.UpdateCompanyRequest]) (*connect_go.Response[company.Company], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.company.v1.CompanyService.UpdateCompany is not implemented"))
}

func (UnimplementedCompanyServiceHandler) DeleteCompany(context.Context, *connect_go.Request[company.DeleteCompanyRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.company.v1.CompanyService.DeleteCompany is not implemented"))
}

func (UnimplementedCompanyServiceHandler) ListCompanies(context.Context, *connect_go.Request[company.ListCompaniesRequest]) (*connect_go.Response[company.ListCompaniesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.company.v1.CompanyService.ListCompanies is not implemented"))
}

func (UnimplementedCompanyServiceHandler) SearchCompanies(context.Context, *connect_go.Request[company.SearchCompaniesRequest]) (*connect_go.Response[company.SearchCompaniesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.company.v1.CompanyService.SearchCompanies is not implemented"))
}

func (UnimplementedCompanyServiceHandler) UpdateCompanyStatus(context.Context, *connect_go.Request[company.UpdateCompanyStatusRequest]) (*connect_go.Response[company.Company], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.company.v1.CompanyService.UpdateCompanyStatus is not implemented"))
}

func (UnimplementedCompanyServiceHandler) VerifyCompany(context.Context, *connect_go.Request[company.VerifyCompanyRequest]) (*connect_go.Response[company.Company], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.company.v1.CompanyService.VerifyCompany is not implemented"))
}
