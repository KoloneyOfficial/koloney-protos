// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/proto/application/application.proto

package applicationv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	application "koloney-protos/v1/go/v1/proto/application"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ApplicationServiceName is the fully-qualified name of the ApplicationService service.
	ApplicationServiceName = "koloney.application.v1.ApplicationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ApplicationServiceCreateApplicationProcedure is the fully-qualified name of the
	// ApplicationService's CreateApplication RPC.
	ApplicationServiceCreateApplicationProcedure = "/koloney.application.v1.ApplicationService/CreateApplication"
	// ApplicationServiceGetApplicationProcedure is the fully-qualified name of the ApplicationService's
	// GetApplication RPC.
	ApplicationServiceGetApplicationProcedure = "/koloney.application.v1.ApplicationService/GetApplication"
	// ApplicationServiceUpdateApplicationProcedure is the fully-qualified name of the
	// ApplicationService's UpdateApplication RPC.
	ApplicationServiceUpdateApplicationProcedure = "/koloney.application.v1.ApplicationService/UpdateApplication"
	// ApplicationServiceDeleteApplicationProcedure is the fully-qualified name of the
	// ApplicationService's DeleteApplication RPC.
	ApplicationServiceDeleteApplicationProcedure = "/koloney.application.v1.ApplicationService/DeleteApplication"
	// ApplicationServiceListApplicationsProcedure is the fully-qualified name of the
	// ApplicationService's ListApplications RPC.
	ApplicationServiceListApplicationsProcedure = "/koloney.application.v1.ApplicationService/ListApplications"
	// ApplicationServiceUpdateApplicationStatusProcedure is the fully-qualified name of the
	// ApplicationService's UpdateApplicationStatus RPC.
	ApplicationServiceUpdateApplicationStatusProcedure = "/koloney.application.v1.ApplicationService/UpdateApplicationStatus"
)

// ApplicationServiceClient is a client for the koloney.application.v1.ApplicationService service.
type ApplicationServiceClient interface {
	// CreateApplication creates a new job application.
	CreateApplication(context.Context, *connect_go.Request[application.CreateApplicationRequest]) (*connect_go.Response[application.Application], error)
	// GetApplication retrieves an application by name.
	GetApplication(context.Context, *connect_go.Request[application.GetApplicationRequest]) (*connect_go.Response[application.Application], error)
	// UpdateApplication updates an existing application.
	UpdateApplication(context.Context, *connect_go.Request[application.UpdateApplicationRequest]) (*connect_go.Response[application.Application], error)
	// DeleteApplication removes an application.
	DeleteApplication(context.Context, *connect_go.Request[application.DeleteApplicationRequest]) (*connect_go.Response[emptypb.Empty], error)
	// ListApplications retrieves a paginated list of applications.
	ListApplications(context.Context, *connect_go.Request[application.ListApplicationsRequest]) (*connect_go.Response[application.ListApplicationsResponse], error)
	// UpdateApplicationStatus changes the status of an application.
	UpdateApplicationStatus(context.Context, *connect_go.Request[application.UpdateApplicationStatusRequest]) (*connect_go.Response[application.Application], error)
}

// NewApplicationServiceClient constructs a client for the koloney.application.v1.ApplicationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewApplicationServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ApplicationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &applicationServiceClient{
		createApplication: connect_go.NewClient[application.CreateApplicationRequest, application.Application](
			httpClient,
			baseURL+ApplicationServiceCreateApplicationProcedure,
			opts...,
		),
		getApplication: connect_go.NewClient[application.GetApplicationRequest, application.Application](
			httpClient,
			baseURL+ApplicationServiceGetApplicationProcedure,
			opts...,
		),
		updateApplication: connect_go.NewClient[application.UpdateApplicationRequest, application.Application](
			httpClient,
			baseURL+ApplicationServiceUpdateApplicationProcedure,
			opts...,
		),
		deleteApplication: connect_go.NewClient[application.DeleteApplicationRequest, emptypb.Empty](
			httpClient,
			baseURL+ApplicationServiceDeleteApplicationProcedure,
			opts...,
		),
		listApplications: connect_go.NewClient[application.ListApplicationsRequest, application.ListApplicationsResponse](
			httpClient,
			baseURL+ApplicationServiceListApplicationsProcedure,
			opts...,
		),
		updateApplicationStatus: connect_go.NewClient[application.UpdateApplicationStatusRequest, application.Application](
			httpClient,
			baseURL+ApplicationServiceUpdateApplicationStatusProcedure,
			opts...,
		),
	}
}

// applicationServiceClient implements ApplicationServiceClient.
type applicationServiceClient struct {
	createApplication       *connect_go.Client[application.CreateApplicationRequest, application.Application]
	getApplication          *connect_go.Client[application.GetApplicationRequest, application.Application]
	updateApplication       *connect_go.Client[application.UpdateApplicationRequest, application.Application]
	deleteApplication       *connect_go.Client[application.DeleteApplicationRequest, emptypb.Empty]
	listApplications        *connect_go.Client[application.ListApplicationsRequest, application.ListApplicationsResponse]
	updateApplicationStatus *connect_go.Client[application.UpdateApplicationStatusRequest, application.Application]
}

// CreateApplication calls koloney.application.v1.ApplicationService.CreateApplication.
func (c *applicationServiceClient) CreateApplication(ctx context.Context, req *connect_go.Request[application.CreateApplicationRequest]) (*connect_go.Response[application.Application], error) {
	return c.createApplication.CallUnary(ctx, req)
}

// GetApplication calls koloney.application.v1.ApplicationService.GetApplication.
func (c *applicationServiceClient) GetApplication(ctx context.Context, req *connect_go.Request[application.GetApplicationRequest]) (*connect_go.Response[application.Application], error) {
	return c.getApplication.CallUnary(ctx, req)
}

// UpdateApplication calls koloney.application.v1.ApplicationService.UpdateApplication.
func (c *applicationServiceClient) UpdateApplication(ctx context.Context, req *connect_go.Request[application.UpdateApplicationRequest]) (*connect_go.Response[application.Application], error) {
	return c.updateApplication.CallUnary(ctx, req)
}

// DeleteApplication calls koloney.application.v1.ApplicationService.DeleteApplication.
func (c *applicationServiceClient) DeleteApplication(ctx context.Context, req *connect_go.Request[application.DeleteApplicationRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteApplication.CallUnary(ctx, req)
}

// ListApplications calls koloney.application.v1.ApplicationService.ListApplications.
func (c *applicationServiceClient) ListApplications(ctx context.Context, req *connect_go.Request[application.ListApplicationsRequest]) (*connect_go.Response[application.ListApplicationsResponse], error) {
	return c.listApplications.CallUnary(ctx, req)
}

// UpdateApplicationStatus calls koloney.application.v1.ApplicationService.UpdateApplicationStatus.
func (c *applicationServiceClient) UpdateApplicationStatus(ctx context.Context, req *connect_go.Request[application.UpdateApplicationStatusRequest]) (*connect_go.Response[application.Application], error) {
	return c.updateApplicationStatus.CallUnary(ctx, req)
}

// ApplicationServiceHandler is an implementation of the koloney.application.v1.ApplicationService
// service.
type ApplicationServiceHandler interface {
	// CreateApplication creates a new job application.
	CreateApplication(context.Context, *connect_go.Request[application.CreateApplicationRequest]) (*connect_go.Response[application.Application], error)
	// GetApplication retrieves an application by name.
	GetApplication(context.Context, *connect_go.Request[application.GetApplicationRequest]) (*connect_go.Response[application.Application], error)
	// UpdateApplication updates an existing application.
	UpdateApplication(context.Context, *connect_go.Request[application.UpdateApplicationRequest]) (*connect_go.Response[application.Application], error)
	// DeleteApplication removes an application.
	DeleteApplication(context.Context, *connect_go.Request[application.DeleteApplicationRequest]) (*connect_go.Response[emptypb.Empty], error)
	// ListApplications retrieves a paginated list of applications.
	ListApplications(context.Context, *connect_go.Request[application.ListApplicationsRequest]) (*connect_go.Response[application.ListApplicationsResponse], error)
	// UpdateApplicationStatus changes the status of an application.
	UpdateApplicationStatus(context.Context, *connect_go.Request[application.UpdateApplicationStatusRequest]) (*connect_go.Response[application.Application], error)
}

// NewApplicationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewApplicationServiceHandler(svc ApplicationServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	applicationServiceCreateApplicationHandler := connect_go.NewUnaryHandler(
		ApplicationServiceCreateApplicationProcedure,
		svc.CreateApplication,
		opts...,
	)
	applicationServiceGetApplicationHandler := connect_go.NewUnaryHandler(
		ApplicationServiceGetApplicationProcedure,
		svc.GetApplication,
		opts...,
	)
	applicationServiceUpdateApplicationHandler := connect_go.NewUnaryHandler(
		ApplicationServiceUpdateApplicationProcedure,
		svc.UpdateApplication,
		opts...,
	)
	applicationServiceDeleteApplicationHandler := connect_go.NewUnaryHandler(
		ApplicationServiceDeleteApplicationProcedure,
		svc.DeleteApplication,
		opts...,
	)
	applicationServiceListApplicationsHandler := connect_go.NewUnaryHandler(
		ApplicationServiceListApplicationsProcedure,
		svc.ListApplications,
		opts...,
	)
	applicationServiceUpdateApplicationStatusHandler := connect_go.NewUnaryHandler(
		ApplicationServiceUpdateApplicationStatusProcedure,
		svc.UpdateApplicationStatus,
		opts...,
	)
	return "/koloney.application.v1.ApplicationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ApplicationServiceCreateApplicationProcedure:
			applicationServiceCreateApplicationHandler.ServeHTTP(w, r)
		case ApplicationServiceGetApplicationProcedure:
			applicationServiceGetApplicationHandler.ServeHTTP(w, r)
		case ApplicationServiceUpdateApplicationProcedure:
			applicationServiceUpdateApplicationHandler.ServeHTTP(w, r)
		case ApplicationServiceDeleteApplicationProcedure:
			applicationServiceDeleteApplicationHandler.ServeHTTP(w, r)
		case ApplicationServiceListApplicationsProcedure:
			applicationServiceListApplicationsHandler.ServeHTTP(w, r)
		case ApplicationServiceUpdateApplicationStatusProcedure:
			applicationServiceUpdateApplicationStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedApplicationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedApplicationServiceHandler struct{}

func (UnimplementedApplicationServiceHandler) CreateApplication(context.Context, *connect_go.Request[application.CreateApplicationRequest]) (*connect_go.Response[application.Application], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.application.v1.ApplicationService.CreateApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetApplication(context.Context, *connect_go.Request[application.GetApplicationRequest]) (*connect_go.Response[application.Application], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.application.v1.ApplicationService.GetApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) UpdateApplication(context.Context, *connect_go.Request[application.UpdateApplicationRequest]) (*connect_go.Response[application.Application], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.application.v1.ApplicationService.UpdateApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) DeleteApplication(context.Context, *connect_go.Request[application.DeleteApplicationRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.application.v1.ApplicationService.DeleteApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) ListApplications(context.Context, *connect_go.Request[application.ListApplicationsRequest]) (*connect_go.Response[application.ListApplicationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.application.v1.ApplicationService.ListApplications is not implemented"))
}

func (UnimplementedApplicationServiceHandler) UpdateApplicationStatus(context.Context, *connect_go.Request[application.UpdateApplicationStatusRequest]) (*connect_go.Response[application.Application], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("koloney.application.v1.ApplicationService.UpdateApplicationStatus is not implemented"))
}
