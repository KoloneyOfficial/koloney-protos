syntax = "proto3";

package koloney.user.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";

option go_package = "github.com/koloney/koloney-protos/gen/koloney/user/v1;userv1";
option java_multiple_files = true;
option java_outer_classname = "UserProto";
option java_package = "com.koloney.user.v1";

// User represents a user account in the Koloney system.
message User {
  option (google.api.resource) = {
    type: "koloney.googleapis.com/User"
    pattern: "users/{user}"
  };

  // The resource name of the user.
  // Format: `users/{user}`
  string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The unique identifier of the user.
  string uid = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The user's email address.
  string email = 3 [(google.api.field_behavior) = REQUIRED];

  // The user's display name.
  string display_name = 4 [(google.api.field_behavior) = REQUIRED];

  // The user's profile picture URL.
  optional string avatar_url = 5;

  // The user's account status.
  UserStatus status = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The user's preferences.
  UserPreferences preferences = 7;

  // The creation timestamp of the user.
  google.protobuf.Timestamp create_time = 8 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The last update timestamp of the user.
  google.protobuf.Timestamp update_time = 9 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The last login timestamp of the user.
  google.protobuf.Timestamp last_login_time = 10 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// UserStatus represents the possible states of a user account.
enum UserStatus {
  // The user status is unspecified.
  USER_STATUS_UNSPECIFIED = 0;

  // The user account is active.
  USER_STATUS_ACTIVE = 1;

  // The user account is suspended.
  USER_STATUS_SUSPENDED = 2;

  // The user account is deleted.
  USER_STATUS_DELETED = 3;
}

// UserPreferences contains user-specific settings.
message UserPreferences {
  // Whether email notifications are enabled.
  bool email_notifications_enabled = 1;

  // The preferred language code (e.g., "en-US").
  string language = 2;

  // The theme preference (light/dark).
  string theme = 3;

  // The time zone (e.g., "America/New_York").
  string timezone = 4;
}

// UserService provides user management functionality.
service UserService {
  // CreateUser creates a new user account.
  rpc CreateUser(CreateUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/v1/users"
      body: "user"
    };
  }

  // GetUser retrieves a user by name.
  rpc GetUser(GetUserRequest) returns (User) {
    option (google.api.http) = {
      get: "/v1/{name=users/*}"
    };
  }

  // UpdateUser updates an existing user's information.
  rpc UpdateUser(UpdateUserRequest) returns (User) {
    option (google.api.http) = {
      patch: "/v1/{user.name=users/*}"
      body: "user"
    };
  }

  // DeleteUser marks a user account as deleted.
  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=users/*}"
    };
  }

  // ListUsers retrieves a paginated list of users.
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/v1/users"
    };
  }

  // AuthenticateUser validates user credentials and returns user info.
  rpc AuthenticateUser(AuthenticateUserRequest) returns (AuthenticateUserResponse) {
    option (google.api.http) = {
      post: "/v1/users:authenticate"
      body: "*"
    };
  }
}

// CreateUserRequest contains the information needed to create a new user.
message CreateUserRequest {
  // The user resource to create.
  User user = 1 [(google.api.field_behavior) = REQUIRED];

  // The user's password.
  string password = 2 [(google.api.field_behavior) = REQUIRED];
}

// GetUserRequest contains the name of the user to retrieve.
message GetUserRequest {
  // The name of the user to retrieve.
  // Format: `users/{user}`
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

// UpdateUserRequest contains the fields that can be updated for a user.
message UpdateUserRequest {
  // The user resource which replaces the resource on the server.
  User user = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to update.
  google.protobuf.FieldMask update_mask = 2;
}

// DeleteUserRequest contains the name of the user to delete.
message DeleteUserRequest {
  // The name of the user to delete.
  // Format: `users/{user}`
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

// ListUsersRequest contains pagination parameters.
message ListUsersRequest {
  // The maximum number of users to return.
  int32 page_size = 1;

  // The next_page_token value returned from a previous List request, if any.
  string page_token = 2;

  // Filter users by status.
  optional UserStatus status = 3;
}

// ListUsersResponse contains a page of users and pagination info.
message ListUsersResponse {
  // The list of users.
  repeated User users = 1;

  // Token to retrieve the next page of results.
  string next_page_token = 2;

  // The total number of users matching the request.
  int32 total_size = 3;
}

// AuthenticateUserRequest contains login credentials.
message AuthenticateUserRequest {
  // The user's email address.
  string email = 1 [(google.api.field_behavior) = REQUIRED];

  // The user's password.
  string password = 2 [(google.api.field_behavior) = REQUIRED];
}

// AuthenticateUserResponse contains authentication result.
message AuthenticateUserResponse {
  // The authenticated user.
  User user = 1;

  // The access token for the user.
  string access_token = 2;

  // The expiration timestamp of the access token.
  google.protobuf.Timestamp expires_time = 3;
}

